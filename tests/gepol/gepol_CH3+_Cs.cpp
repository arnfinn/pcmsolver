#define BOOST_TEST_MODULE GePolCavityCsAddTest

#include <boost/test/unit_test.hpp>
#include <boost/test/floating_point_comparison.hpp>

#include <vector>
#include <cmath>

#include "Config.hpp"

#include "EigenPimpl.hpp"

#include <boost/filesystem.hpp>

#include "GePolCavity.hpp"
#include "PhysicalConstants.hpp"
#include "Symmetry.hpp"

namespace fs = boost::filesystem;

struct GePolCavityCsAddTest {
    GePolCavity cavity;
    GePolCavityCsAddTest() { SetUp(); }
    void SetUp() {
        Eigen::Vector3d	C1( 0.0006122714,  0.0000000000,  0.0000000000);
        Eigen::Vector3d	H1( 1.5162556382, -1.3708721537,  0.0000000000);
        Eigen::Vector3d	H2(-0.7584339548,  0.6854360769,  1.7695110698);
        Eigen::Vector3d	H3(-0.7584339548,  0.6854360769, -1.7695110698);
        std::vector<Sphere> spheres;
        double radiusC = (1.70 * 1.20) / convertBohrToAngstrom;
        double radiusH = (1.20 * 1.20) / convertBohrToAngstrom;
        Sphere sph1(C1, radiusC);
        Sphere sph2(H1, radiusH);
        Sphere sph3(H2, radiusH);
        Sphere sph4(H3, radiusH);
        spheres.push_back(sph1);
        spheres.push_back(sph2);
        spheres.push_back(sph3);
        spheres.push_back(sph4);
        double area = 0.2 / convertBohr2ToAngstrom2;
        double probeRadius = 1.385 / convertBohrToAngstrom;
        // Addition of spheres is enabled, but will not happen in this particular case
        double minRadius = 0.2 / convertBohrToAngstrom;
        // Cs as generated by Oxy
        Symmetry pGroup = buildGroup(1, 4, 0, 0);
        cavity = GePolCavity(spheres, area, probeRadius, minRadius, pGroup);
        fs::rename("PEDRA.OUT", "PEDRA.OUT.cs");
        fs::rename("cavity.off", "cavity.off.cs");
    }
};

/*! \class GePolCavity
 *  \test \b GePolCavityCsAddTest_size tests GePol cavity size for CH3+ in Cs symmetry with added spheres
 */
BOOST_FIXTURE_TEST_CASE(size, GePolCavityCsAddTest)
{
    int size = 384;
    int actualSize = cavity.size();
    BOOST_REQUIRE_EQUAL(size, actualSize);
}

/*! \class GePolCavity
 *  \test \b GePolCavityCsAddTest_irreducible_size tests GePol cavity irreducible size for CH3+ in Cs symmetry with added spheres
 */
BOOST_FIXTURE_TEST_CASE(irreducible_size, GePolCavityCsAddTest)
{
    int size = 192;
    int actualSize = cavity.irreducible_size();
    BOOST_REQUIRE_EQUAL(size, actualSize);
}

/*! \class GePolCavity
 *  \test \b GePolCavityCsAddTest_area tests GePol cavity surface area for CH3+ in Cs symmetry with added spheres
 */
BOOST_FIXTURE_TEST_CASE(area, GePolCavityCsAddTest)
{
    double area = 211.86178059383573;
    double actualArea = cavity.elementArea().sum();
    BOOST_REQUIRE_CLOSE(area, actualArea, 1.0e-10);
}

/*! \class GePolCavity
 *  \test \b GePolCavityCsAddTest_volume tests GePol cavity volume for CH3+ in Cs symmetry with added spheres
 */
BOOST_FIXTURE_TEST_CASE(volume, GePolCavityCsAddTest)
{
    double volume = 278.95706420724309;
    Eigen::Matrix3Xd elementCenter = cavity.elementCenter();
    Eigen::Matrix3Xd elementNormal = cavity.elementNormal();
    double actualVolume = 0;
    for ( int i = 0; i < cavity.size(); ++i ) {
        actualVolume += cavity.elementArea(i) * elementCenter.col(i).dot(elementNormal.col(
                            i));
    }
    actualVolume /= 3;
    BOOST_REQUIRE_CLOSE(volume, actualVolume, 1.0e-10);
}
