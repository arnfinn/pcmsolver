#include <vector>
#include <cmath>

#include "Config.hpp"

#include "EigenPimpl.hpp"

#include <boost/filesystem.hpp>

#include "GePolCavity.hpp"
#include "PhysicalConstants.hpp"
#include "Symmetry.hpp"

#include "gtestPimpl.hpp"

namespace fs = boost::filesystem;

class GePolCavityC1Test : public ::testing::Test
{
protected:
    GePolCavity cavity;
    virtual void SetUp() {
        Eigen::Vector3d origin(0.0, 0.0, 0.0);
        std::vector<Sphere> spheres;
        Sphere sph1(origin,  1.0);
        spheres.push_back(sph1);
        double area = 0.4;
        double probeRadius = 0.0;
        double minRadius = 100.0;
        // C1
        Symmetry group = buildGroup(0, 0, 0, 0);
        cavity = GePolCavity(spheres, area, probeRadius, minRadius, group);
        fs::rename("PEDRA.OUT", "PEDRA.OUT.c1");
        fs::rename("cavity.off", "cavity.off.c1");
    }
};

/*! \class GePolCavity 
 *  \test \b GePolCavityC1Test_size tests GePol cavity size for a point charge in C1 symmetry with added spheres
 */
TEST_F(GePolCavityC1Test, size)
{
    int size = 32;
    int actualSize = cavity.size();
    EXPECT_EQ(size, actualSize);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityC1Test_irreducible_size tests GePol cavity irreducible size for a point charge in C1 symmetry with added spheres
 */
TEST_F(GePolCavityC1Test, irreducible_size)
{
    int size = 32;
    int actualSize = cavity.irreducible_size();
    EXPECT_EQ(size, actualSize);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityC1Test_area tests GePol cavity surface area for a point charge in C1 symmetry with added spheres
 */
TEST_F(GePolCavityC1Test, area)
{
    double area = 4.0 * M_PI * pow(1.0, 2);
    double actualArea = cavity.elementArea().sum();
    EXPECT_DOUBLE_EQ(area, actualArea);
//	EXPECT_NEAR(area, actualArea, 1.0e-12);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityC1Test_volume tests GePol cavity volume for a point charge in C1 symmetry with added spheres
 */
TEST_F(GePolCavityC1Test, volume)
{
    double volume = 4.0 * M_PI * pow(1.0, 3) / 3.0;
    Eigen::Matrix3Xd elementCenter = cavity.elementCenter();
    Eigen::Matrix3Xd elementNormal = cavity.elementNormal();
    double actualVolume = 0;
    for ( int i = 0; i < cavity.size(); ++i ) {
        actualVolume += cavity.elementArea(i) * elementCenter.col(i).dot(elementNormal.col(
                            i));
    }
    actualVolume /= 3;
    EXPECT_DOUBLE_EQ(volume, actualVolume);
//	EXPECT_NEAR(volume, actualVolume, 1.0e-12);
}

class GePolCavityCsTest : public ::testing::Test
{
protected:
    GePolCavity cavity;
    virtual void SetUp() {
        Eigen::Vector3d origin(0.0, 0.0, 0.0);
        std::vector<Sphere> spheres;
        Sphere sph1(origin,  1.0);
        spheres.push_back(sph1);
        double area = 0.4;
        double probeRadius = 0.0;
        double minRadius = 100.0;
        // Cs as generated by Oyz
        Symmetry group = buildGroup(1, 1, 0, 0);
        cavity = GePolCavity(spheres, area, probeRadius, minRadius, group);
        fs::rename("PEDRA.OUT", "PEDRA.OUT.cs");
        fs::rename("cavity.off", "cavity.off.cs");
    }
};

/*! \class GePolCavity 
 *  \test \b GePolCavityCsTest_size tests GePol cavity size for a point charge in Cs symmetry with added spheres
 */
TEST_F(GePolCavityCsTest, size)
{
    int size = 32;
    int actualSize = cavity.size();
    EXPECT_EQ(size, actualSize);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityCsTest_irreducible_size tests GePol cavity irreducible size for a point charge in Cs symmetry 
 */
TEST_F(GePolCavityCsTest, irreducible_size)
{
    int size = 16;
    int actualSize = cavity.irreducible_size();
    EXPECT_EQ(size, actualSize);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityCsTest_area tests GePol cavity surface area for a point charge in Cs symmetry 
 */
TEST_F(GePolCavityCsTest, area)
{
    double area = 4.0 * M_PI * pow(1.0, 2);
    double actualArea = cavity.elementArea().sum();
    EXPECT_DOUBLE_EQ(area, actualArea);
//	EXPECT_NEAR(area, actualArea, 1.0e-12);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityCsTest_volume tests GePol cavity volume for a point charge in Cs symmetry 
 */
TEST_F(GePolCavityCsTest, volume)
{
    double volume = 4.0 * M_PI * pow(1.0, 3) / 3.0;
    Eigen::Matrix3Xd elementCenter = cavity.elementCenter();
    Eigen::Matrix3Xd elementNormal = cavity.elementNormal();
    double actualVolume = 0;
    for ( int i = 0; i < cavity.size(); ++i ) {
        actualVolume += cavity.elementArea(i) * elementCenter.col(i).dot(elementNormal.col(
                            i));
    }
    actualVolume /= 3;
    EXPECT_DOUBLE_EQ(volume, actualVolume);
//	EXPECT_NEAR(volume, actualVolume, 1.0e-12);
}

class GePolCavityC2Test : public ::testing::Test
{
protected:
    GePolCavity cavity;
    virtual void SetUp() {
        Eigen::Vector3d origin(0.0, 0.0, 0.0);
        std::vector<Sphere> spheres;
        Sphere sph1(origin,  1.0);
        spheres.push_back(sph1);
        double area = 0.4;
        double probeRadius = 0.0;
        double minRadius = 100.0;
        // C2 as generated by C2z
        Symmetry group = buildGroup(1, 3, 0, 0);
        cavity = GePolCavity(spheres, area, probeRadius, minRadius, group);
        fs::rename("PEDRA.OUT", "PEDRA.OUT.c2");
        fs::rename("cavity.off", "cavity.off.c2");
    }
};

/*! \class GePolCavity 
 *  \test \b GePolCavityC2Test_size tests GePol cavity size for a point charge in C2 symmetry 
 */
TEST_F(GePolCavityC2Test, size)
{
    int size = 32;
    int actualSize = cavity.size();
    EXPECT_EQ(size, actualSize);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityC2Test_irreducible_size tests GePol cavity irreducible size for a point charge in C2 symmetry 
 */
TEST_F(GePolCavityC2Test, irreducible_size)
{
    int size = 16;
    int actualSize = cavity.irreducible_size();
    EXPECT_EQ(size, actualSize);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityC2Test_area tests GePol cavity surface area for a point charge in C2 symmetry 
 */
TEST_F(GePolCavityC2Test, area)
{
    double area = 4.0 * M_PI * pow(1.0, 2);
    double actualArea = cavity.elementArea().sum();
    EXPECT_DOUBLE_EQ(area, actualArea);
//	EXPECT_NEAR(area, actualArea, 1.0e-12);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityC2Test_volume tests GePol cavity volume for a point charge in C2 symmetry 
 */
TEST_F(GePolCavityC2Test, volume)
{
    double volume = 4.0 * M_PI * pow(1.0, 3) / 3.0;
    Eigen::Matrix3Xd elementCenter = cavity.elementCenter();
    Eigen::Matrix3Xd elementNormal = cavity.elementNormal();
    double actualVolume = 0;
    for ( int i = 0; i < cavity.size(); ++i ) {
        actualVolume += cavity.elementArea(i) * elementCenter.col(i).dot(elementNormal.col(
                            i));
    }
    actualVolume /= 3;
    EXPECT_DOUBLE_EQ(volume, actualVolume);
//	EXPECT_NEAR(volume, actualVolume, 1.0e-12);
}

class GePolCavityCiTest : public ::testing::Test
{
protected:
    GePolCavity cavity;
    virtual void SetUp() {
        Eigen::Vector3d origin(0.0, 0.0, 0.0);
        std::vector<Sphere> spheres;
        Sphere sph1(origin,  1.0);
        spheres.push_back(sph1);
        double area = 0.4;
        double probeRadius = 0.0;
        double minRadius = 100.0;
        // Ci as generated by i
        Symmetry group = buildGroup(1, 7, 0, 0);
        cavity = GePolCavity(spheres, area, probeRadius, minRadius, group);
        fs::rename("PEDRA.OUT", "PEDRA.OUT.ci");
        fs::rename("cavity.off", "cavity.off.ci");
    }
};

/*! \class GePolCavity 
 *  \test \b GePolCavityCiTest_size tests GePol cavity size for a point charge in Ci symmetry 
 */
TEST_F(GePolCavityCiTest, size)
{
    int size = 32;
    int actualSize = cavity.size();
    EXPECT_EQ(size, actualSize);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityCiTest_irreducible_size tests GePol cavity irreducible size for a point charge in Ci symmetry 
 */
TEST_F(GePolCavityCiTest, irreducible_size)
{
    int size = 16;
    int actualSize = cavity.irreducible_size();
    EXPECT_EQ(size, actualSize);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityCiTest_area tests GePol cavity surface area for a point charge in Ci symmetry 
 */
TEST_F(GePolCavityCiTest, area)
{
    double area = 4.0 * M_PI * pow(1.0, 2);
    double actualArea = cavity.elementArea().sum();
    EXPECT_DOUBLE_EQ(area, actualArea);
//	EXPECT_NEAR(area, actualArea, 1.0e-12);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityCiTest_volume tests GePol cavity volume for a point charge in Ci symmetry 
 */
TEST_F(GePolCavityCiTest, volume)
{
    double volume = 4.0 * M_PI * pow(1.0, 3) / 3.0;
    Eigen::Matrix3Xd elementCenter = cavity.elementCenter();
    Eigen::Matrix3Xd elementNormal = cavity.elementNormal();
    double actualVolume = 0;
    for ( int i = 0; i < cavity.size(); ++i ) {
        actualVolume += cavity.elementArea(i) * elementCenter.col(i).dot(elementNormal.col(
                            i));
    }
    actualVolume /= 3;
    EXPECT_DOUBLE_EQ(volume, actualVolume);
//	EXPECT_NEAR(volume, actualVolume, 1.0e-12);
}

class GePolCavityC2hTest : public ::testing::Test
{
protected:
    GePolCavity cavity;
    virtual void SetUp() {
        Eigen::Vector3d origin(0.0, 0.0, 0.0);
        std::vector<Sphere> spheres;
        Sphere sph1(origin,  1.0);
        spheres.push_back(sph1);
        double area = 0.4;
        double probeRadius = 0.0;
        double minRadius = 100.0;
        // C2h as generated by Oxy and i
        Symmetry group = buildGroup(2, 4, 7, 0);
        cavity = GePolCavity(spheres, area, probeRadius, minRadius, group);
        fs::rename("PEDRA.OUT", "PEDRA.OUT.c2h");
        fs::rename("cavity.off", "cavity.off.c2h");
    }
};

/*! \class GePolCavity 
 *  \test \b GePolCavityC2hTest_size tests GePol cavity size for a point charge in C2h symmetry 
 */
TEST_F(GePolCavityC2hTest, size)
{
    int size = 32;
    int actualSize = cavity.size();
    EXPECT_EQ(size, actualSize);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityC2hTest_irreducible_size tests GePol cavity irreducible size for a point charge in C2h symmetry 
 */
TEST_F(GePolCavityC2hTest, irreducible_size)
{
    int size = 8;
    int actualSize = cavity.irreducible_size();
    EXPECT_EQ(size, actualSize);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityC2hTest_area tests GePol cavity surface area for a point charge in C2h symmetry 
 */
TEST_F(GePolCavityC2hTest, area)
{
    double area = 4.0 * M_PI * pow(1.0, 2);
    double actualArea = cavity.elementArea().sum();
    EXPECT_DOUBLE_EQ(area, actualArea);
//	EXPECT_NEAR(area, actualArea, 1.0e-12);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityC2hTest_volume tests GePol cavity volume for a point charge in C2h symmetry 
 */
TEST_F(GePolCavityC2hTest, volume)
{
    double volume = 4.0 * M_PI * pow(1.0, 3) / 3.0;
    Eigen::Matrix3Xd elementCenter = cavity.elementCenter();
    Eigen::Matrix3Xd elementNormal = cavity.elementNormal();
    double actualVolume = 0;
    for ( int i = 0; i < cavity.size(); ++i ) {
        actualVolume += cavity.elementArea(i) * elementCenter.col(i).dot(elementNormal.col(
                            i));
    }
    actualVolume /= 3;
    EXPECT_DOUBLE_EQ(volume, actualVolume);
//	EXPECT_NEAR(volume, actualVolume, 1.0e-12);
}

class GePolCavityD2Test : public ::testing::Test
{
protected:
    GePolCavity cavity;
    virtual void SetUp() {
        Eigen::Vector3d origin(0.0, 0.0, 0.0);
        std::vector<Sphere> spheres;
        Sphere sph1(origin,  1.0);
        spheres.push_back(sph1);
        double area = 0.4;
        double probeRadius = 0.0;
        double minRadius = 100.0;
        // D2 as generated by C2z and C2x
        Symmetry group = buildGroup(2, 3, 6, 0);
        cavity = GePolCavity(spheres, area, probeRadius, minRadius, group);
        fs::rename("PEDRA.OUT", "PEDRA.OUT.d2");
        fs::rename("cavity.off", "cavity.off.d2");
    }
};

/*! \class GePolCavity 
 *  \test \b GePolCavityD2Test_size tests GePol cavity size for a point charge in D2 symmetry 
 */
TEST_F(GePolCavityD2Test, size)
{
    int size = 32;
    int actualSize = cavity.size();
    EXPECT_EQ(size, actualSize);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityD2Test_irreducible_size tests GePol cavity irreducible size for a point charge in D2 symmetry 
 */
TEST_F(GePolCavityD2Test, irreducible_size)
{
    int size = 8;
    int actualSize = cavity.irreducible_size();
    EXPECT_EQ(size, actualSize);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityD2Test_area tests GePol cavity surface area for a point charge in D2 symmetry 
 */
TEST_F(GePolCavityD2Test, area)
{
    double area = 4.0 * M_PI * pow(1.0, 2);
    double actualArea = cavity.elementArea().sum();
    EXPECT_DOUBLE_EQ(area, actualArea);
//	EXPECT_NEAR(area, actualArea, 1.0e-12);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityD2Test_volume tests GePol cavity volume for a point charge in D2 symmetry 
 */
TEST_F(GePolCavityD2Test, volume)
{
    double volume = 4.0 * M_PI * pow(1.0, 3) / 3.0;
    Eigen::Matrix3Xd elementCenter = cavity.elementCenter();
    Eigen::Matrix3Xd elementNormal = cavity.elementNormal();
    double actualVolume = 0;
    for ( int i = 0; i < cavity.size(); ++i ) {
        actualVolume += cavity.elementArea(i) * elementCenter.col(i).dot(elementNormal.col(
                            i));
    }
    actualVolume /= 3;
    EXPECT_DOUBLE_EQ(volume, actualVolume);
//	EXPECT_NEAR(volume, actualVolume, 1.0e-12);
}

class GePolCavityC2vTest : public ::testing::Test
{
protected:
    GePolCavity cavity;
    virtual void SetUp() {
        Eigen::Vector3d origin(0.0, 0.0, 0.0);
        std::vector<Sphere> spheres;
        Sphere sph1(origin,  1.0);
        spheres.push_back(sph1);
        double area = 0.4;
        double probeRadius = 0.0;
        double minRadius = 100.0;
        // C2v as generated by Oyz and Oxz
        Symmetry group = buildGroup(2, 1, 2, 0);
        cavity = GePolCavity(spheres, area, probeRadius, minRadius, group);
        fs::rename("PEDRA.OUT", "PEDRA.OUT.c2v");
        fs::rename("cavity.off", "cavity.off.c2v");
    }
};

/*! \class GePolCavity 
 *  \test \b GePolCavityC2vTest_size tests GePol cavity size for a point charge in C2v symmetry 
 */
TEST_F(GePolCavityC2vTest, size)
{
    int size = 32;
    int actualSize = cavity.size();
    EXPECT_EQ(size, actualSize);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityC2vTest_irreducible_size tests GePol cavity irreducible size for a point charge in C2v symmetry 
 */
TEST_F(GePolCavityC2vTest, irreducible_size)
{
    int size = 8;
    int actualSize = cavity.irreducible_size();
    EXPECT_EQ(size, actualSize);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityC2vTest_area tests GePol cavity surface area for a point charge in C2v symmetry 
 */
TEST_F(GePolCavityC2vTest, area)
{
    double area = 4.0 * M_PI * pow(1.0, 2);
    double actualArea = cavity.elementArea().sum();
    EXPECT_DOUBLE_EQ(area, actualArea);
//	EXPECT_NEAR(area, actualArea, 1.0e-12);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityC2vTest_volume tests GePol cavity volume for a point charge in C2v symmetry 
 */
TEST_F(GePolCavityC2vTest, volume)
{
    double volume = 4.0 * M_PI * pow(1.0, 3) / 3.0;
    Eigen::Matrix3Xd elementCenter = cavity.elementCenter();
    Eigen::Matrix3Xd elementNormal = cavity.elementNormal();
    double actualVolume = 0;
    for ( int i = 0; i < cavity.size(); ++i ) {
        actualVolume += cavity.elementArea(i) * elementCenter.col(i).dot(elementNormal.col(
                            i));
    }
    actualVolume /= 3;
    EXPECT_DOUBLE_EQ(volume, actualVolume);
//	EXPECT_NEAR(volume, actualVolume, 1.0e-12);
}

class GePolCavityD2hTest : public ::testing::Test
{
protected:
    GePolCavity cavity;
    virtual void SetUp() {
        Eigen::Vector3d origin(0.0, 0.0, 0.0);
        std::vector<Sphere> spheres;
        Sphere sph1(origin,  1.0);
        spheres.push_back(sph1);
        double area = 0.4;
        double probeRadius = 0.0;
        double minRadius = 100.0;
        // D2h as generated by Oxy, Oxz and Oyz
        Symmetry group = buildGroup(3, 4, 2, 1);
        cavity = GePolCavity(spheres, area, probeRadius, minRadius, group);
        fs::rename("PEDRA.OUT", "PEDRA.OUT.d2h");
        fs::rename("cavity.off", "cavity.off.d2h");
    }
};

/*! \class GePolCavity 
 *  \test \b GePolCavityD2hTest_size tests GePol cavity size for a point charge in D2h symmetry 
 */
TEST_F(GePolCavityD2hTest, size)
{
    int size = 32;
    int actualSize = cavity.size();
    EXPECT_EQ(size, actualSize);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityD2hTest_irreducible_size tests GePol cavity irreducible size for a point charge in D2h symmetry 
 */
TEST_F(GePolCavityD2hTest, irreducible_size)
{
    int size = 4;
    int actualSize = cavity.irreducible_size();
    EXPECT_EQ(size, actualSize);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityD2hTest_area tests GePol cavity surface area for a point charge in D2h symmetry 
 */
TEST_F(GePolCavityD2hTest, area)
{
    double area = 4.0 * M_PI * pow(1.0, 2);
    double actualArea = cavity.elementArea().sum();
    EXPECT_DOUBLE_EQ(area, actualArea);
//	EXPECT_NEAR(area, actualArea, 1.0e-12);
}

/*! \class GePolCavity 
 *  \test \b GePolCavityD2hTest_volume tests GePol cavity volume for a point charge in D2h symmetry 
 */
TEST_F(GePolCavityD2hTest, volume)
{
    double volume = 4.0 * M_PI * pow(1.0, 3) / 3.0;
    Eigen::Matrix3Xd elementCenter = cavity.elementCenter();
    Eigen::Matrix3Xd elementNormal = cavity.elementNormal();
    double actualVolume = 0;
    for ( int i = 0; i < cavity.size(); ++i ) {
        actualVolume += cavity.elementArea(i) * elementCenter.col(i).dot(elementNormal.col(
                            i));
    }
    actualVolume /= 3;
    EXPECT_DOUBLE_EQ(volume, actualVolume);
//	EXPECT_NEAR(volume, actualVolume, 1.0e-12);
}
