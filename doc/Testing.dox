/** \page Testing Testing
We perform unit testing of our API. The unit testing framework used in Google Test <https://code.google.com/p/googletest/>
The framework provides quite an extensive set of macros to test various data types, it also provides
facilities for easily setting up test fixtures and mocks, see <https://code.google.com/p/googletest/wiki/V1_7_Primer> 
for a quick primer on how to use Google Test.
The basic idea of unit testing is to test each building block of the code separataly. In our case,
the term "building block" is used to mean a class.

To add new tests for your class you have to:
	-# create a new subdirectory inside tests/ and add a line like the following
	to the CMakeLists.txt
	\code
	add_subdirectory(new_subdir)
	\endcode
	-# create a CMakeLists.txt inside your new subdirectory. This CMakeLists.txt contains
	a list of the libraries needed to correctly link the executable and
	repeated calls to a macro setting up the build and link commands for the executable, 
	one call for each new .cpp file containig tests you add:
	\code
	set(list_of_libraries lib1 lib2 lib3)
	add_googletest(new_subdir_test1 "${list_of_libraries}" "${LIBS}")
	add_googletest(new_subdir_test2 "${list_of_libraries}" "${LIBS}")
	add_googletest(new_subdir_test3"${list_of_libraries}" "${LIBS}")
	\endcode
	We require that each source file containing tests follows the naming convention
	new_subdir_testname and that testname gives some clue to what is being tested.
	If any test depends on the result of the execution of some previous test you should
	call the add_googletest macro in the relevant order.
	Depending on the execution of tests in a different subdirectory is bad practice.
	A possible workaround is to add some kind of input file and create a text fixture
	that sets up the test environment.
	-# create the .cpp files containing the tests. Use the following template:
	\include snippets/test_example.cpp
	In this example we are creating a test fixture called GePolCavityTest. The fixture will instatiate
	a GePolCavity with fixed parameters. The result is then tested against reference values using
	the TEST_F macro provided by Google Test.
	It is **important** to add the documentation lines on top of the tests, to help other
	developers understand which class is being tested and what parameters are being tested.

*/
