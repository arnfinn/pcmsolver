#!@PYTHON_EXECUTABLE@
# -*- python -*-
# -*- coding: utf-8 -*-
# vim:filetype=python:
# Execute cloc.pl Perl script and wrap results in a nicer format.
# cloc script by Al Danial, available at http://cloc.sourceforge.net/
# licensed under the GNU General Public License v2
# (c) Roberto Di Remigio  <roberto.d.remigio@uit.no>
# licensed under the GNU Lesser General Public License

from __future__ import print_function

def cloc_command(perl, cloc_script, files, *args):
    """Wrapper to the cloc.pl Perl script.

    Keyword arguments:
    perl -- perl executable
    cloc_script -- the cloc.pl script
    args -- additional command line arguments to cloc.pl
    """
    import subprocess
    return subprocess.check_output([perl, cloc_script] + [str(f).strip() for f in files] + list(args), shell=False)


def CXX_bar_chart(dirname):
    """Generates matplotlib script for lines of code bar chart.

    Keyword arguments:
    dirname -- directory where the lines of code counting has to take place
    """
    import glob
    import os
    tag = os.path.basename(dirname)
    data = count_CXX(sorted(glob.glob(dirname + '/*.hpp')),
                     sorted(glob.glob(dirname + '/*.cpp')))
    root_dir = '@PROJECT_BINARY_DIR@/doc/gfx/matplotlib'
    if not os.path.exists(root_dir):
        os.makedirs(root_dir)
    plot_script = root_dir + '/' + tag + '.py'
    bar_plot = open(plot_script, 'w+')
    print_header(bar_plot)
    print_data_CXX(data, tag, bar_plot)
    print_script(bar_plot)
    bar_plot.close()


def count_CXX(headers, sources):
    """Counts lines of C++ source code.

    Keyword arguments:
    headers -- list of header files
    sources -- list of source files
    """
    cloc_wrapper(headers, 'scratch_hpp.yml')
    cloc_wrapper(sources, 'scratch_cpp.yml')
    return process_YAML_CXX('scratch_hpp.yml', 'scratch_cpp.yml')


def cloc_wrapper(files, ofile):
   """Counts lines of code in files listed.

    Keyword arguments:
    files -- list of source code files
    ofile -- name of the output file
   """
   import tempfile
   out = cloc_command('@PERL_EXECUTABLE@', '@PROJECT_SOURCE_DIR@/tools/cloc.pl', files, '--yaml')
   temp = tempfile.TemporaryFile()
   try:
       temp.write(out)
       temp.seek(0)
       lines = temp.readlines()
       outfile = open(ofile, 'w')
       outfile.writelines(lines[6:])
       outfile.close()
   finally:
       temp.close()


def process_YAML_CXX(cloc_hpp, cloc_cpp):
    """Counts lines of code in files listed.

    Keyword arguments:
    cloc_hpp -- YAML output file from cloc.pl for header files
    cloc_cpp -- YAML output file from cloc.pl for source files
    """
    from yaml import load, dump
    try:
        from yaml import CLoader as Loader, CDumper as Dumper
    except ImportError:
        from yaml import Loader, Dumper
    # Import YAML file and get relevant data
    data = load(open(cloc_hpp, 'r'), Loader=Loader)
    hpp_files   = data['C/C++ Header']['nFiles']
    hpp_blank   = data['C/C++ Header']['blank']
    hpp_comment = data['C/C++ Header']['comment']
    hpp_code    = data['C/C++ Header']['code']
    # Import YAML file and get relevant data
    data = load(open(cloc_cpp, 'r'), Loader=Loader)
    cpp_files   = data['C++']['nFiles']
    cpp_blank   = data['C++']['blank']
    cpp_comment = data['C++']['comment']
    cpp_code    = data['C++']['code']
    return [hpp_files, hpp_blank, hpp_comment, hpp_code,
            cpp_files, cpp_blank, cpp_comment, cpp_code]


def post_process(tag, raw_output):
    """Postprocess raw cloc.pl output.

    Keyword arguments:
    tag -- a tag for postprocessed output file, i.e. cloc_output-tag
    raw_output -- name of the raw_output file
    """
    from yaml import load, dump
    try:
        from yaml import CLoader as Loader, CDumper as Dumper
    except ImportError:
        from yaml import Loader, Dumper

    stream = open(raw_output, 'r')
    data = load(stream, Loader=Loader)
    output = dump(data, Dumper=Dumper)
    print(output)
    print(data['C/C++ Header']['blank'])

    #lines = open(raw_output).readlines()
    #lines = [l.replace('Fortran 90', 'Fortran90') for l in lines]
    #lines = [l.replace('Fortran 77', 'Fortran77') for l in lines]
    #lines = [l.replace('C/C++ Header', 'Header') for l in lines]
    #outfile = open('cloc_output-'+tag, 'w')
    #outfile.writelines(lines[5:])
    #outfile.close()
    #os.remove(raw_output)


def print_header(plot_script):
    """Print header of matplotlib script generating bar chart.

    Keyword arguments:
    plot_script -- name of the plotting script
    """
    import sys
    import time
    now = time.strftime('%c')
    executable = sys.executable
    print('#!' + executable, file = plot_script)
    print('# Automatically generated on ' + now, file = plot_script)
    print('# Data obtained from the cloc.pl Perl script.', file = plot_script)
    print('# cloc script by Al Danial, available at http://cloc.sourceforge.net/', file = plot_script)
    print('# licensed under the GNU General Public License v2', file = plot_script)
    print('# (c) Roberto Di Remigio  <roberto.d.remigio@uit.no>', file = plot_script)
    print('# licensed under the GNU Lesser General Public License\n', file = plot_script)
    print('from pylab import *', file = plot_script)
    print('from matplotlib.font_manager import FontProperties\n', file = plot_script)


def print_script(plot_script):
    # Read from file
    with open('@CMAKE_SOURCE_DIR@/tools/bar_chart.txt', 'r') as myfile:
        lines = myfile.readlines()
    script = '\n'
    for l in lines:
        script += l
    print(script, file = plot_script)


def print_data_CXX(data, tag, plot_script):
    """ Print data gathered from cloc.pl for C++ sources.

    Keyword arguments:
    data -- lines of code count
    tag  --  tag for the lines of code count data
    plot_script -- the plotting script file
    """
    print('save_root = \'@PROJECT_SOURCE_DIR@/doc/gfx\'\n', file = plot_script)
    print('tag = \'' + tag + '\'\n', file = plot_script)
    print('language         = \'C++\'', file = plot_script)
    print('nr_files_hpp    = '   + str(data[0]),        file = plot_script)
    print('nr_blanks_hpp   = '   + str(data[1]),        file = plot_script)
    print('nr_comments_hpp = '   + str(data[2]),        file = plot_script)
    print('nr_code_hpp     = '   + str(data[3]) + '\n', file = plot_script)
    print('nr_files_cpp    = '   + str(data[4]),        file = plot_script)
    print('nr_blanks_cpp   = '   + str(data[5]),        file = plot_script)
    print('nr_comments_cpp = '   + str(data[6]),        file = plot_script)
    print('nr_code_cpp     = '   + str(data[7]) + '\n', file = plot_script)
    # Sum stuff
    print('nr_files    = nr_files_hpp + nr_files_cpp',       file = plot_script)
    print('nr_blanks   = nr_blanks_hpp + nr_blanks_cpp',     file = plot_script)
    print('nr_comments = nr_comments_hpp + nr_comments_cpp', file = plot_script)
    print('nr_code     = nr_code_hpp + nr_code_cpp',         file = plot_script)
    print('annotation  = \'Library: \' + tag + \'\\nLanguage: \' + language + \'\\nFiles: \' + str(nr_files)',        file = plot_script)
