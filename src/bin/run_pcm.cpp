#include <cstdlib>
#include <cmath>
#include <cstring>
#include <iostream>
#include <map>
#include <memory>
#include <stdexcept>
#include <string>
#include <utility>
#include <vector>

#include "Config.hpp"

#include <Eigen/Core>

// Include Boost headers here
#include <boost/algorithm/string.hpp>
#include <boost/format.hpp>

// Core classes
// This list all header files that need to be included here.
// It is automatically generated by CMake during configuration
#include "BuildInfo.hpp"
#include "Includer.hpp"
#include "Interface.hpp"

void collect_nctot(int * /* nuclei */) {}
void collect_atoms(double * /* charges */, double * /* centers */){}
void host_writer(const char * /* message */, size_t * /* message_length */){}
void set_point_group(int * /* nr_generators */, int * /* gen1 */, int * /* gen2 */, int * /* gen3 */){}
void host_input(cavityInput * /* cav */, solverInput * /* solv */, greenInput * /* green */){}

int main(int argc, char * argv[])
{
    std::cout << "PCMSolver standalone executable" << std::endl;
    // Open output file pcmsolver.out
    std::ofstream out;
    out.open("pcmsolver.out");
    // Print info on how the executable was built
    out << buildInfo() << std::endl;

    if (argc > 2) throw std::invalid_argument("Too many arguments supplied to run_pcm");
    Input parsed = Input(argv[1]);
    parsed.initMolecule();
    out << parsed.molecule() << std::endl;

    out.close();
    // Rename output file

    return EXIT_SUCCESS;
}
